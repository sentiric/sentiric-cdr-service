# docker-compose.service.yml
# Service Geliştirme ortamı

networks:
  sentiric-net: { name: "${NETWORK_NAME:-sentiric-net}", driver: bridge }
  
volumes:
  postgres_data:
  rabbitmq_data:
  qdrant_data:

services:
  # --- VERİ KATMANI ---
  postgres:
    build: { context: ../sentiric-postgres }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${CONFIG_REPO_PATH}/postgres-init:/docker-entrypoint-initdb.d
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    build: { context: ../sentiric-rabbitmq }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["15672:15672", "5672:5672"]
    volumes: [rabbitmq_data:/var/lib/rabbitmq/]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- UYGULAMA SERVİSLERİ ---
  user-service:
    build: { context: ../sentiric-user-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50053"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s    

# --- ARKA PLAN VE VERİ İŞLEME SERVİSLERİ ---

  cdr-service:
    build: { context: ../sentiric-cdr-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${METRICS_PORT_CDR:-9092}:9092"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy }, rabbitmq: { condition: service_healthy }, user-service: { condition: service_healthy } }
 